// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/24/2016 15:49:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          struct_matrix_multi
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module struct_matrix_multi_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] k11;
reg [3:0] k12;
reg [3:0] k13;
reg [3:0] k21;
reg [3:0] k22;
reg [3:0] k23;
reg [3:0] k31;
reg [3:0] k32;
reg [3:0] k33;
reg [3:0] p1;
reg [3:0] p2;
reg [3:0] p3;
// wires                                               
wire [3:0] c1;
wire [3:0] c2;
wire [3:0] c3;

// assign statements (if any)                          
struct_matrix_multi i1 (
// port map - connection between master ports and signals/registers   
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.clk(clk),
	.k11(k11),
	.k12(k12),
	.k13(k13),
	.k21(k21),
	.k22(k22),
	.k23(k23),
	.k31(k31),
	.k32(k32),
	.k33(k33),
	.p1(p1),
	.p2(p2),
	.p3(p3)
);
initial 
begin 
#1500000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 
// p1[ 3 ]
initial
begin
	p1[3] = 1'b0;
	p1[3] = #100000 1'b1;
	p1[3] = #100000 1'b0;
	p1[3] = #200000 1'bZ;
	p1[3] = #100000 1'b1;
	p1[3] = #100000 1'b0;
end 
// p1[ 2 ]
initial
begin
	p1[2] = 1'b0;
	p1[2] = #300000 1'b1;
	p1[2] = #100000 1'bZ;
	p1[2] = #100000 1'b0;
	p1[2] = #100000 1'b1;
	p1[2] = #100000 1'b0;
	p1[2] = #100000 1'b1;
	p1[2] = #140000 1'b0;
	p1[2] = #20000 1'b1;
end 
// p1[ 1 ]
initial
begin
	p1[1] = 1'b0;
	p1[1] = #100000 1'b1;
	p1[1] = #100000 1'b0;
	p1[1] = #100000 1'b1;
	p1[1] = #100000 1'bZ;
	p1[1] = #100000 1'b1;
	p1[1] = #200000 1'b0;
	p1[1] = #100000 1'b1;
	p1[1] = #140000 1'b0;
	p1[1] = #20000 1'b1;
end 
// p1[ 0 ]
initial
begin
	p1[0] = 1'b1;
	p1[0] = #200000 1'b0;
	p1[0] = #200000 1'bZ;
	p1[0] = #100000 1'b1;
	p1[0] = #100000 1'b0;
end 
// p2[ 3 ]
initial
begin
	p2[3] = 1'b0;
	p2[3] = #400000 1'bZ;
	p2[3] = #100000 1'b1;
	p2[3] = #100000 1'b0;
	p2[3] = #100000 1'b1;
	p2[3] = #100000 1'b0;
	p2[3] = #140000 1'b1;
	p2[3] = #20000 1'b0;
end 
// p2[ 2 ]
initial
begin
	p2[2] = 1'b1;
	p2[2] = #200000 1'b0;
	p2[2] = #200000 1'bZ;
	p2[2] = #100000 1'b0;
	p2[2] = #200000 1'b1;
end 
// p2[ 1 ]
initial
begin
	p2[1] = 1'b0;
	p2[1] = #200000 1'b1;
	p2[1] = #200000 1'bZ;
	p2[1] = #100000 1'b1;
end 
// p2[ 0 ]
initial
begin
	p2[0] = 1'b1;
	p2[0] = #100000 1'b0;
	p2[0] = #100000 1'b1;
	p2[0] = #100000 1'b0;
	p2[0] = #100000 1'bZ;
	p2[0] = #100000 1'b1;
	p2[0] = #100000 1'b0;
	p2[0] = #100000 1'b1;
	p2[0] = #100000 1'b0;
	p2[0] = #140000 1'b1;
	p2[0] = #20000 1'b0;
end 
// p3[ 3 ]
initial
begin
	p3[3] = 1'b1;
	p3[3] = #400000 1'bZ;
	p3[3] = #100000 1'b0;
	p3[3] = #100000 1'b1;
end 
// p3[ 2 ]
initial
begin
	p3[2] = 1'b0;
	p3[2] = #100000 1'b1;
	p3[2] = #200000 1'b0;
	p3[2] = #100000 1'bZ;
	p3[2] = #100000 1'b1;
	p3[2] = #100000 1'b0;
	p3[2] = #200000 1'b1;
	p3[2] = #140000 1'b0;
	p3[2] = #20000 1'b1;
end 
// p3[ 1 ]
initial
begin
	p3[1] = 1'b1;
	p3[1] = #100000 1'b0;
	p3[1] = #300000 1'bZ;
	p3[1] = #100000 1'b0;
	p3[1] = #100000 1'b1;
end 
// p3[ 0 ]
initial
begin
	p3[0] = 1'b0;
	p3[0] = #100000 1'b1;
	p3[0] = #100000 1'b0;
	p3[0] = #200000 1'bZ;
	p3[0] = #100000 1'b1;
	p3[0] = #200000 1'b0;
end 
// k11[ 3 ]
initial
begin
	k11[3] = 1'b0;
	k11[3] = #500000 1'b1;
end 
// k11[ 2 ]
initial
begin
	k11[2] = 1'b0;
end 
// k11[ 1 ]
initial
begin
	k11[1] = 1'b0;
	k11[1] = #500000 1'b1;
end 
// k11[ 0 ]
initial
begin
	k11[0] = 1'b1;
	k11[0] = #500000 1'b0;
end 
// k12[ 3 ]
initial
begin
	k12[3] = 1'b0;
end 
// k12[ 2 ]
initial
begin
	k12[2] = 1'b0;
	k12[2] = #500000 1'b1;
end 
// k12[ 1 ]
initial
begin
	k12[1] = 1'b1;
	k12[1] = #500000 1'b0;
end 
// k12[ 0 ]
initial
begin
	k12[0] = 1'b0;
end 
// k13[ 3 ]
initial
begin
	k13[3] = 1'b0;
end 
// k13[ 2 ]
initial
begin
	k13[2] = 1'b0;
end 
// k13[ 1 ]
initial
begin
	k13[1] = 1'b1;
	k13[1] = #500000 1'b0;
end 
// k13[ 0 ]
initial
begin
	k13[0] = 1'b1;
end 
// k21[ 3 ]
initial
begin
	k21[3] = 1'b0;
	k21[3] = #500000 1'b1;
end 
// k21[ 2 ]
initial
begin
	k21[2] = 1'b1;
	k21[2] = #500000 1'b0;
end 
// k21[ 1 ]
initial
begin
	k21[1] = 1'b0;
	k21[1] = #500000 1'b1;
end 
// k21[ 0 ]
initial
begin
	k21[0] = 1'b0;
end 
// k22[ 3 ]
initial
begin
	k22[3] = 1'b0;
	k22[3] = #500000 1'b1;
end 
// k22[ 2 ]
initial
begin
	k22[2] = 1'b1;
	k22[2] = #500000 1'b0;
end 
// k22[ 1 ]
initial
begin
	k22[1] = 1'b0;
end 
// k22[ 0 ]
initial
begin
	k22[0] = 1'b1;
end 
// k23[ 3 ]
initial
begin
	k23[3] = 1'b0;
	k23[3] = #500000 1'b1;
end 
// k23[ 2 ]
initial
begin
	k23[2] = 1'b1;
end 
// k23[ 1 ]
initial
begin
	k23[1] = 1'b1;
end 
// k23[ 0 ]
initial
begin
	k23[0] = 1'b0;
end 
// k31[ 3 ]
initial
begin
	k31[3] = 1'b0;
end 
// k31[ 2 ]
initial
begin
	k31[2] = 1'b1;
	k31[2] = #500000 1'b0;
end 
// k31[ 1 ]
initial
begin
	k31[1] = 1'b1;
	k31[1] = #500000 1'b0;
end 
// k31[ 0 ]
initial
begin
	k31[0] = 1'b1;
end 
// k32[ 3 ]
initial
begin
	k32[3] = 1'b1;
end 
// k32[ 2 ]
initial
begin
	k32[2] = 1'b0;
	k32[2] = #500000 1'b1;
end 
// k32[ 1 ]
initial
begin
	k32[1] = 1'b0;
	k32[1] = #500000 1'b1;
end 
// k32[ 0 ]
initial
begin
	k32[0] = 1'b0;
end 
// k33[ 3 ]
initial
begin
	k33[3] = 1'b1;
	k33[3] = #500000 1'b0;
end 
// k33[ 2 ]
initial
begin
	k33[2] = 1'b0;
end 
// k33[ 1 ]
initial
begin
	k33[1] = 1'b1;
	k33[1] = #500000 1'b0;
end 
// k33[ 0 ]
initial
begin
	k33[0] = 1'b0;
	k33[0] = #500000 1'b1;
end 
endmodule

