// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/24/2016 16:00:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Multiplexer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Multiplexer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] dk11;
reg [3:0] dk12;
reg [3:0] dk13;
reg [3:0] dk21;
reg [3:0] dk22;
reg [3:0] dk23;
reg [3:0] dk31;
reg [3:0] dk32;
reg [3:0] dk33;
reg [3:0] k11;
reg [3:0] k12;
reg [3:0] k13;
reg [3:0] k21;
reg [3:0] k22;
reg [3:0] k23;
reg [3:0] k31;
reg [3:0] k32;
reg [3:0] k33;
reg sel;
// wires                                               
wire [3:0] out_key11;
wire [3:0] out_key12;
wire [3:0] out_key13;
wire [3:0] out_key21;
wire [3:0] out_key22;
wire [3:0] out_key23;
wire [3:0] out_key31;
wire [3:0] out_key32;
wire [3:0] out_key33;

// assign statements (if any)                          
Multiplexer i1 (
// port map - connection between master ports and signals/registers   
	.dk11(dk11),
	.dk12(dk12),
	.dk13(dk13),
	.dk21(dk21),
	.dk22(dk22),
	.dk23(dk23),
	.dk31(dk31),
	.dk32(dk32),
	.dk33(dk33),
	.k11(k11),
	.k12(k12),
	.k13(k13),
	.k21(k21),
	.k22(k22),
	.k23(k23),
	.k31(k31),
	.k32(k32),
	.k33(k33),
	.out_key11(out_key11),
	.out_key12(out_key12),
	.out_key13(out_key13),
	.out_key21(out_key21),
	.out_key22(out_key22),
	.out_key23(out_key23),
	.out_key31(out_key31),
	.out_key32(out_key32),
	.out_key33(out_key33),
	.sel(sel)
);
initial 
begin 
#1000000 $finish;
end 

// sel
initial
begin
	sel = 1'b1;
	sel = #100000 1'b0;
	sel = #200000 1'b1;
	sel = #100000 1'b0;
	sel = #200000 1'b1;
	sel = #100000 1'b0;
end 
// dk11[ 3 ]
initial
begin
	dk11[3] = 1'b1;
end 
// dk11[ 2 ]
initial
begin
	dk11[2] = 1'b0;
end 
// dk11[ 1 ]
initial
begin
	dk11[1] = 1'b1;
end 
// dk11[ 0 ]
initial
begin
	dk11[0] = 1'b1;
end 
// dk12[ 3 ]
initial
begin
	dk12[3] = 1'b1;
end 
// dk12[ 2 ]
initial
begin
	dk12[2] = 1'b0;
end 
// dk12[ 1 ]
initial
begin
	dk12[1] = 1'b1;
end 
// dk12[ 0 ]
initial
begin
	dk12[0] = 1'b1;
end 
// dk13[ 3 ]
initial
begin
	dk13[3] = 1'b1;
end 
// dk13[ 2 ]
initial
begin
	dk13[2] = 1'b0;
end 
// dk13[ 1 ]
initial
begin
	dk13[1] = 1'b1;
end 
// dk13[ 0 ]
initial
begin
	dk13[0] = 1'b1;
end 
// dk21[ 3 ]
initial
begin
	dk21[3] = 1'b1;
end 
// dk21[ 2 ]
initial
begin
	dk21[2] = 1'b0;
end 
// dk21[ 1 ]
initial
begin
	dk21[1] = 1'b1;
end 
// dk21[ 0 ]
initial
begin
	dk21[0] = 1'b1;
end 
// dk22[ 3 ]
initial
begin
	dk22[3] = 1'b1;
end 
// dk22[ 2 ]
initial
begin
	dk22[2] = 1'b0;
end 
// dk22[ 1 ]
initial
begin
	dk22[1] = 1'b1;
end 
// dk22[ 0 ]
initial
begin
	dk22[0] = 1'b1;
end 
// dk23[ 3 ]
initial
begin
	dk23[3] = 1'b1;
end 
// dk23[ 2 ]
initial
begin
	dk23[2] = 1'b0;
end 
// dk23[ 1 ]
initial
begin
	dk23[1] = 1'b1;
end 
// dk23[ 0 ]
initial
begin
	dk23[0] = 1'b1;
end 
// dk31[ 3 ]
initial
begin
	dk31[3] = 1'b1;
end 
// dk31[ 2 ]
initial
begin
	dk31[2] = 1'b0;
end 
// dk31[ 1 ]
initial
begin
	dk31[1] = 1'b1;
end 
// dk31[ 0 ]
initial
begin
	dk31[0] = 1'b1;
end 
// dk32[ 3 ]
initial
begin
	dk32[3] = 1'b1;
end 
// dk32[ 2 ]
initial
begin
	dk32[2] = 1'b0;
end 
// dk32[ 1 ]
initial
begin
	dk32[1] = 1'b1;
end 
// dk32[ 0 ]
initial
begin
	dk32[0] = 1'b1;
end 
// dk33[ 3 ]
initial
begin
	dk33[3] = 1'b1;
end 
// dk33[ 2 ]
initial
begin
	dk33[2] = 1'b0;
end 
// dk33[ 1 ]
initial
begin
	dk33[1] = 1'b1;
end 
// dk33[ 0 ]
initial
begin
	dk33[0] = 1'b1;
end 
// k11[ 3 ]
initial
begin
	k11[3] = 1'b1;
end 
// k11[ 2 ]
initial
begin
	k11[2] = 1'b0;
end 
// k11[ 1 ]
initial
begin
	k11[1] = 1'b1;
end 
// k11[ 0 ]
initial
begin
	k11[0] = 1'b0;
end 
// k12[ 3 ]
initial
begin
	k12[3] = 1'b1;
end 
// k12[ 2 ]
initial
begin
	k12[2] = 1'b0;
end 
// k12[ 1 ]
initial
begin
	k12[1] = 1'b1;
end 
// k12[ 0 ]
initial
begin
	k12[0] = 1'b0;
end 
// k13[ 3 ]
initial
begin
	k13[3] = 1'b1;
end 
// k13[ 2 ]
initial
begin
	k13[2] = 1'b0;
end 
// k13[ 1 ]
initial
begin
	k13[1] = 1'b1;
end 
// k13[ 0 ]
initial
begin
	k13[0] = 1'b0;
end 
// k21[ 3 ]
initial
begin
	k21[3] = 1'b1;
end 
// k21[ 2 ]
initial
begin
	k21[2] = 1'b0;
end 
// k21[ 1 ]
initial
begin
	k21[1] = 1'b1;
end 
// k21[ 0 ]
initial
begin
	k21[0] = 1'b0;
end 
// k22[ 3 ]
initial
begin
	k22[3] = 1'b1;
end 
// k22[ 2 ]
initial
begin
	k22[2] = 1'b0;
end 
// k22[ 1 ]
initial
begin
	k22[1] = 1'b1;
end 
// k22[ 0 ]
initial
begin
	k22[0] = 1'b0;
end 
// k23[ 3 ]
initial
begin
	k23[3] = 1'b1;
end 
// k23[ 2 ]
initial
begin
	k23[2] = 1'b0;
end 
// k23[ 1 ]
initial
begin
	k23[1] = 1'b1;
end 
// k23[ 0 ]
initial
begin
	k23[0] = 1'b0;
end 
// k31[ 3 ]
initial
begin
	k31[3] = 1'b1;
end 
// k31[ 2 ]
initial
begin
	k31[2] = 1'b0;
end 
// k31[ 1 ]
initial
begin
	k31[1] = 1'b1;
end 
// k31[ 0 ]
initial
begin
	k31[0] = 1'b0;
end 
// k32[ 3 ]
initial
begin
	k32[3] = 1'b1;
end 
// k32[ 2 ]
initial
begin
	k32[2] = 1'b0;
end 
// k32[ 1 ]
initial
begin
	k32[1] = 1'b1;
end 
// k32[ 0 ]
initial
begin
	k32[0] = 1'b0;
end 
// k33[ 3 ]
initial
begin
	k33[3] = 1'b1;
end 
// k33[ 2 ]
initial
begin
	k33[2] = 1'b0;
end 
// k33[ 1 ]
initial
begin
	k33[1] = 1'b1;
end 
// k33[ 0 ]
initial
begin
	k33[0] = 1'b0;
end 
endmodule

