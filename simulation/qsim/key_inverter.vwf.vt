// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/17/2016 23:14:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          key_inverter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module key_inverter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] ek11;
reg [3:0] ek12;
reg [3:0] ek13;
reg [3:0] ek21;
reg [3:0] ek22;
reg [3:0] ek23;
reg [3:0] ek31;
reg [3:0] ek32;
reg [3:0] ek33;
// wires                                               
wire [3:0] dk11;
wire [3:0] dk12;
wire [3:0] dk13;
wire [3:0] dk21;
wire [3:0] dk22;
wire [3:0] dk23;
wire [3:0] dk31;
wire [3:0] dk32;
wire [3:0] dk33;

// assign statements (if any)                          
key_inverter i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dk11(dk11),
	.dk12(dk12),
	.dk13(dk13),
	.dk21(dk21),
	.dk22(dk22),
	.dk23(dk23),
	.dk31(dk31),
	.dk32(dk32),
	.dk33(dk33),
	.ek11(ek11),
	.ek12(ek12),
	.ek13(ek13),
	.ek21(ek21),
	.ek22(ek22),
	.ek23(ek23),
	.ek31(ek31),
	.ek32(ek32),
	.ek33(ek33)
);
initial 
begin 
#8000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 
// ek11[ 3 ]
initial
begin
	ek11[3] = 1'b0;
	ek11[3] = #1000000 1'b1;
	ek11[3] = #2000000 1'b0;
	ek11[3] = #2000000 1'b1;
	ek11[3] = #1000000 1'b0;
	ek11[3] = #100000 1'b1;
	ek11[3] = #200000 1'b0;
	ek11[3] = #200000 1'b1;
end 
// ek11[ 2 ]
initial
begin
	ek11[2] = 1'b0;
	ek11[2] = #2000000 1'b1;
	ek11[2] = #2000000 1'b0;
	ek11[2] = #1000000 1'b1;
	ek11[2] = #1000000 1'b0;
	ek11[2] = #200000 1'b1;
	ek11[2] = #200000 1'b0;
	ek11[2] = #100000 1'b1;
end 
// ek11[ 1 ]
initial
begin
	ek11[1] = 1'b0;
	ek11[1] = #1000000 1'b1;
	ek11[1] = #1000000 1'b0;
	ek11[1] = #2000000 1'b1;
	ek11[1] = #1000000 1'b0;
	ek11[1] = #1100000 1'b1;
	ek11[1] = #100000 1'b0;
	ek11[1] = #200000 1'b1;
	ek11[1] = #100000 1'b0;
end 
// ek11[ 0 ]
initial
begin
	ek11[0] = 1'b1;
	ek11[0] = #1000000 1'b0;
	ek11[0] = #2000000 1'b1;
	ek11[0] = #1000000 1'b0;
	ek11[0] = #1000000 1'b1;
	ek11[0] = #1100000 1'b0;
	ek11[0] = #200000 1'b1;
	ek11[0] = #100000 1'b0;
	ek11[0] = #100000 1'b1;
end 
// ek12[ 3 ]
initial
begin
	ek12[3] = 1'b0;
	ek12[3] = #2000000 1'b1;
	ek12[3] = #1000000 1'b0;
	ek12[3] = #1000000 1'b1;
	ek12[3] = #1000000 1'b0;
	ek12[3] = #1200000 1'b1;
	ek12[3] = #100000 1'b0;
	ek12[3] = #100000 1'b1;
	ek12[3] = #100000 1'b0;
end 
// ek12[ 2 ]
initial
begin
	ek12[2] = 1'b0;
	ek12[2] = #1000000 1'b1;
	ek12[2] = #3000000 1'b0;
	ek12[2] = #2100000 1'b1;
	ek12[2] = #300000 1'b0;
end 
// ek12[ 1 ]
initial
begin
	ek12[1] = 1'b1;
	ek12[1] = #1000000 1'b0;
	ek12[1] = #2000000 1'b1;
	ek12[1] = #2000000 1'b0;
	ek12[1] = #1000000 1'b1;
	ek12[1] = #100000 1'b0;
	ek12[1] = #200000 1'b1;
	ek12[1] = #200000 1'b0;
end 
// ek12[ 0 ]
initial
begin
	ek12[0] = 1'b0;
	ek12[0] = #2000000 1'b1;
	ek12[0] = #2000000 1'b0;
	ek12[0] = #1000000 1'b1;
	ek12[0] = #1000000 1'b0;
	ek12[0] = #200000 1'b1;
	ek12[0] = #200000 1'b0;
	ek12[0] = #100000 1'b1;
end 
// ek13[ 3 ]
initial
begin
	ek13[3] = 1'b0;
	ek13[3] = #3000000 1'b1;
	ek13[3] = #1000000 1'b0;
	ek13[3] = #2300000 1'b1;
	ek13[3] = #100000 1'b0;
end 
// ek13[ 2 ]
initial
begin
	ek13[2] = 1'b0;
	ek13[2] = #2000000 1'b1;
	ek13[2] = #1000000 1'b0;
	ek13[2] = #1000000 1'b1;
	ek13[2] = #2000000 1'b0;
	ek13[2] = #200000 1'b1;
	ek13[2] = #100000 1'b0;
	ek13[2] = #100000 1'b1;
end 
// ek13[ 1 ]
initial
begin
	ek13[1] = 1'b1;
	ek13[1] = #1000000 1'b0;
	ek13[1] = #1000000 1'b1;
	ek13[1] = #1000000 1'b0;
	ek13[1] = #1000000 1'b1;
	ek13[1] = #2100000 1'b0;
	ek13[1] = #100000 1'b1;
	ek13[1] = #100000 1'b0;
	ek13[1] = #100000 1'b1;
end 
// ek13[ 0 ]
initial
begin
	ek13[0] = 1'b1;
	ek13[0] = #2000000 1'b0;
	ek13[0] = #1000000 1'b1;
	ek13[0] = #2000000 1'b0;
	ek13[0] = #1000000 1'b1;
	ek13[0] = #200000 1'b0;
	ek13[0] = #100000 1'b1;
	ek13[0] = #200000 1'b0;
end 
// ek21[ 3 ]
initial
begin
	ek21[3] = 1'b0;
	ek21[3] = #1000000 1'b1;
	ek21[3] = #1000000 1'b0;
	ek21[3] = #2000000 1'b1;
	ek21[3] = #2000000 1'b0;
	ek21[3] = #100000 1'b1;
	ek21[3] = #100000 1'b0;
	ek21[3] = #200000 1'b1;
end 
// ek21[ 2 ]
initial
begin
	ek21[2] = 1'b1;
	ek21[2] = #1000000 1'b0;
	ek21[2] = #1000000 1'b1;
	ek21[2] = #2000000 1'b0;
	ek21[2] = #1000000 1'b1;
	ek21[2] = #1100000 1'b0;
	ek21[2] = #100000 1'b1;
	ek21[2] = #200000 1'b0;
	ek21[2] = #100000 1'b1;
end 
// ek21[ 1 ]
initial
begin
	ek21[1] = 1'b0;
	ek21[1] = #1000000 1'b1;
	ek21[1] = #1000000 1'b0;
	ek21[1] = #4100000 1'b1;
	ek21[1] = #100000 1'b0;
end 
// ek21[ 0 ]
initial
begin
	ek21[0] = 1'b0;
	ek21[0] = #3000000 1'b1;
	ek21[0] = #2000000 1'b0;
	ek21[0] = #1300000 1'b1;
	ek21[0] = #200000 1'b0;
end 
// ek22[ 3 ]
initial
begin
	ek22[3] = 1'b0;
	ek22[3] = #1000000 1'b1;
	ek22[3] = #1000000 1'b0;
	ek22[3] = #1000000 1'b1;
	ek22[3] = #3000000 1'b0;
	ek22[3] = #100000 1'b1;
	ek22[3] = #100000 1'b0;
	ek22[3] = #100000 1'b1;
end 
// ek22[ 2 ]
initial
begin
	ek22[2] = 1'b1;
	ek22[2] = #1000000 1'b0;
	ek22[2] = #3000000 1'b1;
	ek22[2] = #2100000 1'b0;
	ek22[2] = #300000 1'b1;
end 
// ek22[ 1 ]
initial
begin
	ek22[1] = 1'b0;
	ek22[1] = #2000000 1'b1;
	ek22[1] = #2000000 1'b0;
	ek22[1] = #2200000 1'b1;
	ek22[1] = #200000 1'b0;
end 
// ek22[ 0 ]
initial
begin
	ek22[0] = 1'b1;
	ek22[0] = #2000000 1'b0;
	ek22[0] = #3000000 1'b1;
	ek22[0] = #1200000 1'b0;
	ek22[0] = #300000 1'b1;
end 
// ek23[ 3 ]
initial
begin
	ek23[3] = 1'b0;
	ek23[3] = #1000000 1'b1;
	ek23[3] = #3000000 1'b0;
	ek23[3] = #2100000 1'b1;
	ek23[3] = #300000 1'b0;
end 
// ek23[ 2 ]
initial
begin
	ek23[2] = 1'b1;
	ek23[2] = #4000000 1'b0;
	ek23[2] = #1000000 1'b1;
	ek23[2] = #1400000 1'b0;
	ek23[2] = #100000 1'b1;
end 
// ek23[ 1 ]
initial
begin
	ek23[1] = 1'b1;
	ek23[1] = #3000000 1'b0;
	ek23[1] = #1000000 1'b1;
	ek23[1] = #2300000 1'b0;
	ek23[1] = #100000 1'b1;
end 
// ek23[ 0 ]
initial
begin
	ek23[0] = 1'b0;
	ek23[0] = #2000000 1'b1;
	ek23[0] = #1000000 1'b0;
	ek23[0] = #1000000 1'b1;
	ek23[0] = #2000000 1'b0;
	ek23[0] = #200000 1'b1;
	ek23[0] = #100000 1'b0;
	ek23[0] = #100000 1'b1;
end 
// ek31[ 3 ]
initial
begin
	ek31[3] = 1'b0;
	ek31[3] = #3000000 1'b1;
	ek31[3] = #1000000 1'b0;
	ek31[3] = #1000000 1'b1;
	ek31[3] = #1000000 1'b0;
	ek31[3] = #300000 1'b1;
	ek31[3] = #100000 1'b0;
	ek31[3] = #100000 1'b1;
end 
// ek31[ 2 ]
initial
begin
	ek31[2] = 1'b1;
	ek31[2] = #1000000 1'b0;
	ek31[2] = #2000000 1'b1;
	ek31[2] = #2000000 1'b0;
	ek31[2] = #1000000 1'b1;
	ek31[2] = #100000 1'b0;
	ek31[2] = #200000 1'b1;
	ek31[2] = #200000 1'b0;
end 
// ek31[ 1 ]
initial
begin
	ek31[1] = 1'b1;
	ek31[1] = #1000000 1'b0;
	ek31[1] = #2000000 1'b1;
	ek31[1] = #1000000 1'b0;
	ek31[1] = #2000000 1'b1;
	ek31[1] = #100000 1'b0;
	ek31[1] = #200000 1'b1;
	ek31[1] = #100000 1'b0;
end 
// ek31[ 0 ]
initial
begin
	ek31[0] = 1'b1;
	ek31[0] = #3000000 1'b0;
	ek31[0] = #1000000 1'b1;
	ek31[0] = #2300000 1'b0;
	ek31[0] = #100000 1'b1;
end 
// ek32[ 3 ]
initial
begin
	ek32[3] = 1'b1;
	ek32[3] = #5000000 1'b0;
	ek32[3] = #1000000 1'b1;
	ek32[3] = #500000 1'b0;
end 
// ek32[ 2 ]
initial
begin
	ek32[2] = 1'b0;
	ek32[2] = #1000000 1'b1;
	ek32[2] = #1000000 1'b0;
	ek32[2] = #1000000 1'b1;
	ek32[2] = #1000000 1'b0;
	ek32[2] = #1000000 1'b1;
	ek32[2] = #1000000 1'b0;
	ek32[2] = #100000 1'b1;
	ek32[2] = #100000 1'b0;
	ek32[2] = #100000 1'b1;
	ek32[2] = #100000 1'b0;
	ek32[2] = #100000 1'b1;
end 
// ek32[ 1 ]
initial
begin
	ek32[1] = 1'b0;
	ek32[1] = #1000000 1'b1;
	ek32[1] = #1000000 1'b0;
	ek32[1] = #1000000 1'b1;
	ek32[1] = #2000000 1'b0;
	ek32[1] = #1100000 1'b1;
	ek32[1] = #100000 1'b0;
	ek32[1] = #100000 1'b1;
	ek32[1] = #200000 1'b0;
end 
// ek32[ 0 ]
initial
begin
	ek32[0] = 1'b0;
	ek32[0] = #2000000 1'b1;
	ek32[0] = #3000000 1'b0;
	ek32[0] = #1200000 1'b1;
	ek32[0] = #300000 1'b0;
end 
// ek33[ 3 ]
initial
begin
	ek33[3] = 1'b1;
	ek33[3] = #1000000 1'b0;
	ek33[3] = #2000000 1'b1;
	ek33[3] = #1000000 1'b0;
	ek33[3] = #2000000 1'b1;
	ek33[3] = #100000 1'b0;
	ek33[3] = #200000 1'b1;
	ek33[3] = #100000 1'b0;
end 
// ek33[ 2 ]
initial
begin
	ek33[2] = 1'b0;
	ek33[2] = #3000000 1'b1;
	ek33[2] = #1000000 1'b0;
	ek33[2] = #2300000 1'b1;
	ek33[2] = #100000 1'b0;
end 
// ek33[ 1 ]
initial
begin
	ek33[1] = 1'b1;
	ek33[1] = #1000000 1'b0;
	ek33[1] = #3000000 1'b1;
	ek33[1] = #2100000 1'b0;
	ek33[1] = #300000 1'b1;
end 
// ek33[ 0 ]
initial
begin
	ek33[0] = 1'b0;
	ek33[0] = #1000000 1'b1;
	ek33[0] = #2000000 1'b0;
	ek33[0] = #1000000 1'b1;
	ek33[0] = #1000000 1'b0;
	ek33[0] = #1100000 1'b1;
	ek33[0] = #200000 1'b0;
	ek33[0] = #100000 1'b1;
	ek33[0] = #100000 1'b0;
end 
endmodule

