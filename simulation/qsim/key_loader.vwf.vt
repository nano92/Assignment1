// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/21/2016 13:59:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          struct_key_loader
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module struct_key_loader_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg load_key;
reg [3:0] p1;
reg [3:0] p2;
reg [3:0] p3;
// wires                                               
wire [3:0] k11;
wire [3:0] k12;
wire [3:0] k13;
wire [3:0] k21;
wire [3:0] k22;
wire [3:0] k23;
wire [3:0] k31;
wire [3:0] k32;
wire [3:0] k33;

// assign statements (if any)                          
struct_key_loader i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.k11(k11),
	.k12(k12),
	.k13(k13),
	.k21(k21),
	.k22(k22),
	.k23(k23),
	.k31(k31),
	.k32(k32),
	.k33(k33),
	.load_key(load_key),
	.p1(p1),
	.p2(p2),
	.p3(p3)
);
initial 
begin 
#2000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// load_key
initial
begin
	load_key = 1'b0;
	load_key = #500000 1'b1;
	load_key = #300000 1'b0;
	load_key = #100000 1'b1;
	load_key = #300000 1'b0;
end 
// p1[ 3 ]
initial
begin
	p1[3] = 1'b0;
	p1[3] = #940000 1'b1;
	p1[3] = #20000 1'b0;
	p1[3] = #80000 1'b1;
	p1[3] = #20000 1'b0;
	p1[3] = #80000 1'b1;
	p1[3] = #20000 1'b0;
end 
// p1[ 2 ]
initial
begin
	p1[2] = 1'b0;
	p1[2] = #1140000 1'b1;
	p1[2] = #20000 1'b0;
end 
// p1[ 1 ]
initial
begin
	p1[1] = 1'b0;
	p1[1] = #600000 1'b1;
	p1[1] = #200000 1'b0;
	p1[1] = #140000 1'b1;
	p1[1] = #20000 1'b0;
	p1[1] = #80000 1'b1;
	p1[1] = #20000 1'b0;
end 
// p1[ 0 ]
initial
begin
	p1[0] = 1'b0;
	p1[0] = #500000 1'b1;
	p1[0] = #100000 1'b0;
	p1[0] = #100000 1'b1;
	p1[0] = #100000 1'b0;
	p1[0] = #240000 1'b1;
	p1[0] = #20000 1'b0;
end 
// p2[ 3 ]
initial
begin
	p2[3] = 1'b0;
	p2[3] = #940000 1'b1;
	p2[3] = #20000 1'b0;
	p2[3] = #80000 1'b1;
	p2[3] = #20000 1'b0;
	p2[3] = #80000 1'b1;
	p2[3] = #20000 1'b0;
end 
// p2[ 2 ]
initial
begin
	p2[2] = 1'b0;
	p2[2] = #500000 1'b1;
	p2[2] = #300000 1'b0;
	p2[2] = #140000 1'b1;
	p2[2] = #20000 1'b0;
	p2[2] = #80000 1'b1;
	p2[2] = #20000 1'b0;
	p2[2] = #80000 1'b1;
	p2[2] = #20000 1'b0;
end 
// p2[ 1 ]
initial
begin
	p2[1] = 1'b0;
	p2[1] = #700000 1'b1;
	p2[1] = #100000 1'b0;
	p2[1] = #240000 1'b1;
	p2[1] = #20000 1'b0;
	p2[1] = #80000 1'b1;
	p2[1] = #20000 1'b0;
end 
// p2[ 0 ]
initial
begin
	p2[0] = 1'b0;
	p2[0] = #600000 1'b1;
	p2[0] = #100000 1'b0;
	p2[0] = #240000 1'b1;
	p2[0] = #20000 1'b0;
	p2[0] = #180000 1'b1;
	p2[0] = #20000 1'b0;
end 
// p3[ 3 ]
initial
begin
	p3[3] = 1'b0;
	p3[3] = #600000 1'b1;
	p3[3] = #200000 1'b0;
end 
// p3[ 2 ]
initial
begin
	p3[2] = 1'b0;
	p3[2] = #500000 1'b1;
	p3[2] = #100000 1'b0;
end 
// p3[ 1 ]
initial
begin
	p3[1] = 1'b0;
	p3[1] = #500000 1'b1;
	p3[1] = #100000 1'b0;
	p3[1] = #440000 1'b1;
	p3[1] = #20000 1'b0;
	p3[1] = #80000 1'b1;
	p3[1] = #20000 1'b0;
end 
// p3[ 0 ]
initial
begin
	p3[0] = 1'b0;
	p3[0] = #500000 1'b1;
	p3[0] = #100000 1'b0;
	p3[0] = #100000 1'b1;
	p3[0] = #100000 1'b0;
	p3[0] = #140000 1'b1;
	p3[0] = #20000 1'b0;
	p3[0] = #180000 1'b1;
	p3[0] = #20000 1'b0;
end 
endmodule

